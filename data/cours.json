[
  {
    "id": "bases-arduino",
    "title": "Les bases d'Arduino",
    "description": "Introduction aux concepts fondamentaux d'Arduino",
    "level": "D√©butant",
    "duration": "2h",
    "icon": "üìö",
    "objectives": [
      "Comprendre ce qu'est Arduino",
      "Conna√Ætre les composants de base",
      "√âcrire votre premier programme",
      "Utiliser les entr√©es/sorties num√©riques"
    ],
    "concepts": [
      "Microcontr√¥leur",
      "IDE Arduino",
      "setup() et loop()",
      "digitalWrite()",
      "digitalRead()"
    ],
    "codeExample": "void setup() {\n  pinMode(13, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(13, HIGH);\n  delay(1000);\n  digitalWrite(13, LOW);\n  delay(1000);\n}"
  },
  {
    "id": "entrees-sorties",
    "title": "Entr√©es et sorties",
    "description": "Ma√Ætriser les entr√©es et sorties num√©riques et analogiques",
    "level": "D√©butant",
    "duration": "3h",
    "icon": "üîå",
    "objectives": [
      "Diff√©rencier entr√©es et sorties",
      "Utiliser les entr√©es analogiques",
      "Lire des capteurs",
      "Contr√¥ler des actuateurs"
    ],
    "concepts": [
      "analogRead()",
      "analogWrite()",
      "PWM",
      "R√©solution ADC",
      "Pull-up/Pull-down"
    ],
    "codeExample": "int sensorPin = A0;\nint ledPin = 9;\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  int sensorValue = analogRead(sensorPin);\n  int brightness = map(sensorValue, 0, 1023, 0, 255);\n  analogWrite(ledPin, brightness);\n}"
  },
  {
    "id": "communication-serie",
    "title": "Communication s√©rie",
    "description": "Apprendre √† communiquer avec l'ordinateur via le port s√©rie",
    "level": "Interm√©diaire",
    "duration": "2h",
    "icon": "üí¨",
    "objectives": [
      "Configurer la communication s√©rie",
      "Envoyer des donn√©es vers l'ordinateur",
      "Recevoir des commandes",
      "D√©boguer vos programmes"
    ],
    "concepts": [
      "Serial.begin()",
      "Serial.print()",
      "Serial.read()",
      "Moniteur s√©rie",
      "Baudrate"
    ],
    "codeExample": "void setup() {\n  Serial.begin(9600);\n  pinMode(13, OUTPUT);\n}\n\nvoid loop() {\n  if (Serial.available()) {\n    char command = Serial.read();\n    if (command == '1') {\n      digitalWrite(13, HIGH);\n      Serial.println(\"LED allum√©e\");\n    } else if (command == '0') {\n      digitalWrite(13, LOW);\n      Serial.println(\"LED √©teinte\");\n    }\n  }\n}"
  },
  {
    "id": "esp32-basics",
    "title": "Introduction √† l'ESP32",
    "description": "D√©couvrir les sp√©cificit√©s de l'ESP32 et ses capacit√©s WiFi",
    "level": "Interm√©diaire",
    "duration": "4h",
    "icon": "üì°",
    "objectives": [
      "Comprendre l'architecture ESP32",
      "Configurer l'environnement de d√©veloppement",
      "Utiliser les fonctionnalit√©s WiFi",
      "Cr√©er un serveur web simple"
    ],
    "concepts": ["WiFi.h", "WebServer", "GPIO ESP32", "Dual core", "SPIFFS"],
    "codeExample": "#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"VotreWiFi\";\nconst char* password = \"VotreMotDePasse\";\n\nWebServer server(80);\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.begin(ssid, password);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.println(\"Connexion WiFi...\");\n  }\n  \n  server.on(\"/\", handleRoot);\n  server.begin();\n}\n\nvoid loop() {\n  server.handleClient();\n}\n\nvoid handleRoot() {\n  server.send(200, \"text/html\", \"<h1>ESP32 Web Server</h1>\");\n}"
  }
]
